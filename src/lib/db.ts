import { Pool, PoolClient, QueryResult } from 'pg';

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const getEnvVar = (names: string[]): string | undefined => {
  for (const name of names) {
    if (process.env[name]) {
      return process.env[name];
    }
  }
  return undefined;
};

const POSTGRES_USER = getEnvVar(['POSTGRES_USER', 'DB_USER']);
const POSTGRES_PASSWORD = getEnvVar(['POSTGRES_PASSWORD', 'DB_PASSWORD']);
const POSTGRES_DATABASE = getEnvVar(['POSTGRES_DATABASE', 'DB_NAME']);
const POSTGRES_HOST = getEnvVar(['POSTGRES_HOST', 'DB_HOST']);
const POSTGRES_PORT = getEnvVar(['POSTGRES_PORT', 'DB_PORT']);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!POSTGRES_USER) {
  throw new Error('POSTGRES_USER (–∏–ª–∏ DB_USER) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}
if (!POSTGRES_PASSWORD) {
  throw new Error('POSTGRES_PASSWORD (–∏–ª–∏ DB_PASSWORD) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}
if (!POSTGRES_DATABASE) {
  throw new Error('POSTGRES_DATABASE (–∏–ª–∏ DB_NAME) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}
if (!POSTGRES_HOST) {
  throw new Error('POSTGRES_HOST (–∏–ª–∏ DB_HOST) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}
if (!POSTGRES_PORT) {
  throw new Error('POSTGRES_PORT (–∏–ª–∏ DB_PORT) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  user: POSTGRES_USER,
  host: POSTGRES_HOST,
  database: POSTGRES_DATABASE,
  password: POSTGRES_PASSWORD,
  port: parseInt(POSTGRES_PORT),
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  max: parseInt(process.env.POSTGRES_MAX_CONNECTIONS || '20'),
  idleTimeoutMillis: parseInt(process.env.POSTGRES_IDLE_TIMEOUT || '30000'),
  connectionTimeoutMillis: parseInt(process.env.POSTGRES_CONNECTION_TIMEOUT || '2000'),
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–ª–∞
pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
  process.exit(-1);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
export async function query(text: string, params?: unknown[]): Promise<unknown> {
  try {
    const client = await pool.connect();
    try {
      const result = await client.query(text, params);
      return result;
    } catch (error) {
      console.error('Database query error:', error);
      throw error;
    } finally {
      client.release();
    }
  } catch (error: unknown) {
    // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (error instanceof Error && 'code' in error && error.code === '28P01') {
      console.error('‚ùå PostgreSQL Authentication Error: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env.local:');
      console.error(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${POSTGRES_USER}`);
      console.error('   –ü–∞—Ä–æ–ª—å: ***');
    } else if (error instanceof Error && 'code' in error && error.code === 'ECONNREFUSED') {
      console.error('‚ùå PostgreSQL Connection Refused: PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      console.error(`üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ ${POSTGRES_HOST}:${POSTGRES_PORT}`);
    } else if (error instanceof Error && 'code' in error && error .code === '3D000') {
      console.error('‚ùå Database does not exist: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.error(`üí° –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: CREATE DATABASE ${POSTGRES_DATABASE};`);
    }
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export async function transaction<T>(
  callback: (client: PoolClient) => Promise<T>
): Promise<T> {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const result = await callback(client);
    await client.query('COMMIT');
    return result;
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Transaction error:', error);
    throw error;
  } finally {
    client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
export async function getClient(): Promise<PoolClient> {
  return await pool.connect();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export async function testConnection(): Promise<boolean> {
  try {
    const result = await query('SELECT NOW()');
    console.log('‚úÖ Database connected successfully:', (result as QueryResult).rows[0]);
    return true;
  } catch (error) {// eslint-disable-line @typescript-eslint/no-unused-vars
    console.error('‚ùå Database connection failed');
    return false;
  } 
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ development)
if (process.env.NODE_ENV === 'development') {
  testConnection().then((connected) => {
    if (!connected) {
      console.error('\nüî• –ë–ê–ó–ê –î–ê–ù–ù–´–• –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ê! üî•');
      console.error('üìñ –ß–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ DATABASE_SETUP.md');
      console.error('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.local\n');
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–¥–ª—è graceful shutdown)
export async function closePool(): Promise<void> {
  await pool.end();
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø—É–ª–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export { pool };

export default pool;
